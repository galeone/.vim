import os
import json
import ycm_core
from clang_helpers import PrepareClangFlags


def current_dir():
    return os.path.dirname(os.path.abspath(__file__))


DATABASE = ycm_core.CompilationDatabase(current_dir())

SOURCE_EXTENSIONS = ['.cc', '.cpp', '.cxx', '.c', '.m', '.mm']

# This provides a safe fall-back if no compilation commands are available. You could also add a
# includes relative to your project directory, for example.
FLAGS = [
    '-Wall',
    '-std=c++14',
    '-stdlib=libc++',
    '-x',
    'c++',
    '-I',
    '.',
    '-isystem',
    '/usr/local/include',
    '-isystem',
    '/usr/include',
]


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)
    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']
    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)
    return new_flags


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in ['.h', '.hxx', '.hpp', '.hh']


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]

        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = DATABASE.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
        # If here, not found, fallback to include the first file in the src dir
        filename = filename.replace("include", "src")
        #return None

    compilation_from_database = DATABASE.GetCompilationInfoForFile(filename)

    # If the file still not exists in the compilation database
    # guess the compilation flags (in reality we only need the include path
    # to have a nice autocompletion)
    # using the compilation db from a file in the same folder
    if not compilation_from_database.compiler_flags_:
        with open(
                os.path.join(DATABASE.database_directory,
                             "compile_commands.json")) as jsondb:
            json_db = json.load(jsondb)

        for row in json_db:
            compiled_file_database_dir = "/".join(row["file"].split("/")[:-1])

            if compiled_file_database_dir == os.path.dirname(filename):
                compilation_info = DATABASE.GetCompilationInfoForFile(
                    row["file"])
                if compilation_info.compiler_flags_:
                    return compilation_info

    return compilation_from_database


def FlagsForFile(filename, **kwargs):
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile(filename)
    if not compilation_info:
        relative_to = current_dir()
        final_flags = MakeRelativePathsInFlagsAbsolute(FLAGS, relative_to)
    else:
        final_flags = MakeRelativePathsInFlagsAbsolute(
            compilation_info.compiler_flags_,
            compilation_info.compiler_working_dir_)
    return {'flags': PrepareClangFlags(final_flags, filename), 'do_cache': True}
